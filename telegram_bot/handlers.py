import os
import sys
from aiogram.types import CallbackQuery
from battons.button_builder import but_builder
from datetime import date, datetime

from logic.task import taskCreating, taskShows, showTask # type: ignore
sys.path.insert (1, os.path.join (sys.path[0], "../DataBase"))


from aiogram import Bot, types, F, Router
from aiogram.types import Message
from aiogram.filters import Command
from notion_operations import addNewNotion, delNotion, getActiveNotions # type: ignore
from user_operations import addNewUser, getUserByLogin, getUserIdByName, getUserById # type: ignore 
from state_operations import addUserState, getUserStateByLogin, getUserState, updateUserState # type: ignore
from tasks_operations import getTasksByUser, getTasksById, delTask, updateTaskDate, updateTaskStatus # type: ignore

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import BaseMiddleware



import kb
import text

router = Router()


@router.message(Command("send"))
async def start_handler(msg: Message, bot: Bot, scheduler: AsyncIOScheduler):
    user_id = addNewUser(str(msg.from_user.id), str(msg.from_user.username))
    id = msg.chat.id
    print(id)
    user_state = getUserState(user_id)
    date_time = datetime.now().replace(second=0, microsecond=0)
    date_time1 = date_time.year
    await msg.answer(str(date_time) + " " + str(date_time1))
    # –∑–∞–¥–∞—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–≤–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    #scheduler.add_job(bot.send_message,'interval',seconds=10 ,args=(id,"–Ø –Ω–∞–ø–æ–º–∏–Ω–∞—é –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥"))
    # –∑–∞–¥–∞—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ cron - –≥–∏–±–∫–∏–π —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ–µ https://crontab.guru/#8_*_*_4
    #scheduler.add_job(bot.send_message,'cron',hour=17,minute=21,args=(id,"–Ø –Ω–∞–ø–æ–º–Ω–∏–ª –≤ 17 17 –ø–æ –ú–æ—Å–∫–≤–µ"))


@router.message(F.text.in_({"/kb","–ú–µ–Ω—é"}))
async def message_test(msg: Message):
    user_id = addNewUser (str(msg.from_user.id), str(msg.from_user.username))
    updateUserState(user_id, step = "main_menu")
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    resp = getUserByLogin (str(msg.from_user.id)) [0]
    await msg.edit_text(text.main_menu(resp["user_name"]), reply_markup=but_builder(step))

@router.callback_query (F.data == "kb")
async def message_test(call: CallbackQuery):
    msg = call.message
    user_id = getUserIdByName(call.message.chat.username)
    updateUserState(user_id, step = "main_menu")
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    resp = getUserById (user_id) [0]
    await msg.edit_text(text.main_menu(resp["user_name"]), reply_markup=but_builder(step))

@router.message(Command("start"))
async def start_handler(msg: Message):
    user_id = addNewUser(str(msg.from_user.id), str(msg.from_user.username))
    print(user_id)
    updateUserState(user_id, step = "main_menu")
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    resp = getUserById (user_id) [0]
    await msg.answer(text.main_menu(resp["user_name"]), reply_markup=but_builder(step))


@router.callback_query (F.data.startswith('remind_'))
async def test (call: CallbackQuery):
    task_id = call.data.split("_")[1]
    user_id = getUserIdByName(call.message.chat.username)
    updateUserState(user_id, step = "remind", context = "start "+ str(task_id))
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    task = getTasksById(task_id)[0]
    if task['description']:
        await call.message.edit_text(f'–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–Ω–µ–¥–æ–º–ª–µ–Ω–∏—è\n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\
                                  \n\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\nYYYY-MM-DD HH:MM', reply_markup=but_builder(step))
    else:
        await call.message.edit_text(f'–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–Ω–µ–¥–æ–º–ª–µ–Ω–∏—è\n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\nYYYY-MM-DD HH:MM', reply_markup=but_builder(step))

@router.callback_query (F.data.startswith('task_'))
async def test (call: CallbackQuery):
    task_id = call.data.split("_")[1]
    user_id = getUserIdByName(call.message.chat.username)
    updateUserState(user_id, step = "task", context = "show "+ str(task_id))
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    task = getTasksById(task_id)[0]
    if task['description']:
        await call.message.edit_text(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}',\
                                  reply_markup=but_builder(step, task_id=task_id))
    else:
        await call.message.edit_text(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}',\
                                  reply_markup=but_builder(step, task_id=task_id))

@router.callback_query (F.data.startswith('taskOk_'))
async def test (call: CallbackQuery):
    task_id = call.data.split("_")[1]
    user_id = getUserIdByName(call.message.chat.username)
    user_state = getUserState(user_id)
    updateTaskStatus(task_id, "done")
    delNotion(task_id)
    await call.answer("–ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–Ω–∞—è\n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –Ω–µ–π –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query (F.data.startswith('del_'))
async def test (call: CallbackQuery):
    task_id = call.data.split("_")[1]
    user_id = getUserIdByName(call.message.chat.username)
    step = getUserState(user_id)
    resp = getTasksById(task_id)
    if not resp or (resp[0]['user_id'] != user_id):
        await call.answer("–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏")
        return '–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏'
    delTask(task_id)
    await call.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
    resp = getTasksByUser(user_id)
    if resp:
        await call.message.edit_text("–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:",reply_markup=but_builder(step,resp=resp))
    else:
        await call.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Çüòä",reply_markup=but_builder(step,resp=resp))

@router.callback_query (F.data == "del")
async def message_test(call: CallbackQuery):
    msg = call.message
    user_id = getUserIdByName(call.message.chat.username)
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    context = user_state["context"]
    task_id = context.split()[1]
    resp = getTasksById(task_id)
    if not resp or (resp[0]['user_id'] != user_id):
        await msg.edit_text ("–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏\n", reply_markup=but_builder('main_menu'))
        return '–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏'
    delTask(task_id)
    updateUserState(user_id, step = "main_menu")
    await msg.edit_text ("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞\n", reply_markup=but_builder('main_menu'))
    

@router.callback_query (F.data == "new_task")
async def test (call: CallbackQuery):
    msg = call.message
    user_id = getUserIdByName(msg.chat.username)
    updateUserState(user_id, step = "createTask")
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    await msg.edit_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",reply_markup=but_builder(step))

@router.callback_query (F.data == "show_tasks")
async def test (call: CallbackQuery):
    msg = call.message
    print(msg.chat.username + " –≤—ã–∑–≤–∞–ª show_tasks")
    user_id = getUserIdByName(msg.chat.username)
    print(user_id)
    updateUserState(user_id, step = "showAll")
    resp = getTasksByUser(user_id)
    if not resp:
        await msg.edit_text ("–ù–µ—Ç –∑–∞–¥–∞—á\n")
        return 0
    for task in resp:
        await msg.edit_text(f'–ù–æ–º–µ—Ä-{task['task_id']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}')
    if len(resp) == 1:
        updateUserState(user_id, "task", resp[0]['task_id'])


@router.callback_query (F.data.startswith('show'))
async def test (call: CallbackQuery):
    msg = call.message
    show = call.data.split("_")
    if len(show) > 1:
        rng = int(show[1])
    else:
        rng = 1
    print(msg.chat)
    user_id = getUserIdByName(msg.chat.username)
    updateUserState(user_id, step = "showAll")
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    resp = getTasksByUser(user_id)
    if resp:
        await msg.edit_text("–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:",reply_markup=but_builder(step,resp=resp,rng=rng))
    else:
        await msg.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Çüòä",reply_markup=but_builder(step,resp=resp,rng=rng))



@router.message(Command("help"))
async def help_handler(msg: Message):
    addNewUser (str(msg.from_user.id), str(msg.from_user.username))
    await msg.answer(
"""–ö–æ–º–∞–Ω–¥—ã:
/task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
/show [–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏] - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–¥–∞—á(–∏–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É)
/del [–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏] - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—é—â–µ–π –∑–∞–¥–∞—á–∏(–ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞—á–∏)""")

@router.message(Command("–•—Ç–æ_—è"))
async def message_test(msg: Message):
    addNewUser (str(msg.from_user.id), str(msg.from_user.username))
    resp = getUserByLogin (str(msg.from_user.id)) [0]
    await msg.answer(text.main_menu(resp["user_name"]), reply_markup=kb.main_menu)

@router.message(Command("task"))
async def task_handler(msg: Message):
    user_id = addNewUser(str(msg.from_user.id), str(msg.from_user.username))
    print(user_id)
    updateUserState(user_id, step = "createTask")
    await msg.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")



@router.message(Command("del"))
async def del_handler (msg:Message):
    user_id = addNewUser(str(msg.from_user.id), str(msg.from_user.username))
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    context = user_state["context"]
    text = msg.text.split()
    if len(text) == 2:
        if not text[1].isdigit():
            await msg.answer ("–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏\n")
            return '–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏'
        resp = getTasksById(text[1])
        if not resp or (resp[0]['user_id'] != user_id):
            await msg.answer ("–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏\n")
            return '–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏'
        delTask(text[1])
        await msg.edianswert_text ("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞\n")
    elif len(text) == 1:
        if step == 'task' and context:
            resp = getTasksById(context)[0]
            if not resp or (resp['user_id'] != user_id):
                return '–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏'
            delTask(context)
            await msg.answer ("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞\n")
    else:
        await msg.answer ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n")

@router.message(Command("rty"))
async def message_handler(msg: Message):
    await msg.answer(f"{msg.text}")

@router.message(Command("show"))
async def show_handler(msg: Message):
    user_id = addNewUser(str(msg.from_user.id), str(msg.from_user.username))
    updateUserState(user_id, step = "showAll")
    text = msg.text.split()
    if len(text) == 2:
        if not text[1].isdigit():
            await msg.answer ("–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏\n")
            return '–í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏'
        resp = showTask(user_id, text[1])
        await msg.answer(str(resp))
    else:
        resp = getTasksByUser(user_id)
        if not resp:
            await msg.answer ("–ù–µ—Ç –∑–∞–¥–∞—á\n")
            return 0
        for task in resp:
            await msg.answer(f'–ù–æ–º–µ—Ä-{task['task_id']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}')
        if len(resp) == 1:
            updateUserState(user_id, "task", resp[0]['task_id'])

@router.message()
async def message_handler(msg: Message):
    user_id = addNewUser (str(msg.from_user.id), str(msg.from_user.username))
    user_state = getUserState(user_id)
    step = user_state["curent_step"]
    context = user_state["context"]
    match step:
        case "createTask":
            text, task_id = taskCreating(user_id, context, msg.text)
            user_state = getUserState(user_id)
            step = user_state["curent_step"]
            context = user_state["context"]
            if text: await msg.answer(text,reply_markup=but_builder(step, context=context, task_id=task_id))

        case "showAll":
            text = taskShows(user_id, context, msg.text)
            if text: await msg.answer(text)
        case "main_menu":
            resp = getUserByLogin (str(msg.from_user.id)) [0]
            print("hui")
            await msg.answer(str(resp["user_id"]))
            await msg.answer(resp["user_name"])
        case "remind":
            try:
                date_time = datetime.strptime(msg.text, "%Y-%m-%d %H:%M")
                date_time_now = datetime.now().replace(second=0, microsecond=0)
                if date_time < date_time_now:
                    await msg.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–∏")
                else:
                    task_id = context.split()[1]
                    addNewNotion(task_id, msg.text, msg.chat.id)
                    await msg.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ "+ msg.text,reply_markup=but_builder("main_menu"))
                    updateUserState(user_id, "main_menu")
            except ValueError:
                await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏")
            


