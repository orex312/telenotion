from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, User
from aiogram_dialog import Dialog, DialogManager, StartMode, Window, setup_dialogs
from environs import Env
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage # -- —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import Button, Select, Group, ScrollingGroup, SwitchTo
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput
from aiogram.enums import ContentType, ParseMode
from aiogram_dialog.widgets.input import MessageInput
from magic_filter import F
import os
import sys


sys.path.insert (1, os.path.join (sys.path[0], "../DataBase"))

from tasks_operations import getTasksByUser, getTasksById, delTask, updateTaskDate, updateTaskStatus, addNewTask # type: ignore
from user_operations import addNewUser, getUserByLogin, getUserIdByName, getUserById # type: ignore 

env = Env()
env.read_env()

BOT_TOKEN = '7744140930:AAEtaKzDfFEls5-dc6KPMNui7Mzfv0zasiM'

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

#=================================–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤=================================================================
class MainDialog(StatesGroup):
    start = State()
    task_list = State()
    show_task = State()

class TaskCreating(StatesGroup):
    title = State()
    description = State()
    accept = State()


#=================================–ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –¥–∏–∞–ª–æ–≥–∞–º–∏#===========================================================

async def go_main_menu(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.start(state=MainDialog.start, mode=StartMode.RESET_STACK)

async def go_main(
        callback: CallbackQuery, 
        button: Button,
        dialog_manager: DialogManager):
    await dialog_manager.start(state=MainDialog.start, mode=StartMode.RESET_STACK)

async def create_task(
        callback: CallbackQuery, 
        button: Button,
        dialog_manager: DialogManager
):
    await dialog_manager.start(state=TaskCreating.title)


#=================================–°—Ç–∞—Ä—Ç–µ—Ä—ã –º–∞–∏–Ω –¥–∏–∞–ª–æ–≥–∞#===============================================================
# –≠—Ç–æ –≥–µ—Ç—Ç–µ—Ä
async def get_name(event_from_user: User, **kwargs):
    
    return {'user_name': event_from_user.first_name}

async def get_task_list(event_from_user: User, **kwargs):
    #await callback.message.answer(item_id)
    user_id = getUserByLogin(str(event_from_user.id))[0]["user_id"]
    resp = getTasksByUser(user_id)
    titles = []
    if resp:
        for i in resp:
            titles.append([i["title"],i["task_id"]])
    return {'tasks': resp, "titles": titles}

async def get_task(dialog_manager: DialogManager, **kwargs):
    #await callback.message.answer(item_id)
    task_id = dialog_manager.dialog_data["task_id"]
    #print(kwargs)
    resp = getTasksById(task_id)[0]
    return {'task': resp["task_id"], "title": resp["title"], "description": resp["description"]}

#=================================–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞–∏–Ω –¥–∏–∞–ª–æ–≥–∞#============================================================

async def delete_task(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    #await callback.message.answer(item_id)
    task_id = dialog_manager.dialog_data["task_id"]
    #print(kwargs)
    delTask(task_id)
    await dialog_manager.back()

async def go_next(callback: CallbackQuery, button: Button, dialog_manager: DialogManager, task_id: int):
    dialog_manager.dialog_data["task_id"] = task_id
    await dialog_manager.next()

#=================================–°—Ç–∞—Ä—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Å–∫–∏#=============================================================

async def start_title(dialog_manager: DialogManager, **kwargs):
    if "title" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["title"] = ''
    title = dialog_manager.dialog_data["title"]
    print(title)
    if "description" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["description"] = ''
    description = dialog_manager.dialog_data["description"]
    return {"title": title, "description": description}
    
async def start_description(dialog_manager: DialogManager, **kwargs):
    if "title" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["title"] = ''
    title = dialog_manager.dialog_data["title"]
    print(title)
    if "description" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["description"] = ''
    description = dialog_manager.dialog_data["description"]
    return {"title": title, "description": description}

async def start_accept(dialog_manager: DialogManager, **kwargs):
    if "title" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["title"] = ''
    title = dialog_manager.dialog_data["title"]
    print(title)
    if "description" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["description"] = ''
    description = dialog_manager.dialog_data["description"]
    return {"title": title, "description": description}


#=================================–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞—Å–∫–∏#=====================================================================

async def save_task(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    print(callback.from_user.username, type(callback.from_user.username))
    user_id = getUserIdByName(callback.from_user.username)
    print(user_id)
    title = dialog_manager.dialog_data["title"]
    description = dialog_manager.dialog_data["description"]
    print(title, description)
    task_id = addNewTask(user_id=user_id, title=title, description=description)
    print(task_id)
    await dialog_manager.done()

#=================================–ü—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä –≤–∞–≤–æ–¥–∞ –¥–ª—è —Ç–∞—Å–æ–∫#=======================================================

def title_check(text: str) -> str:
    if len(text) < 50:
        return text
    raise ValueError

def description_check(text: str) -> str:
    if len(text) < 250:
        return text
    raise ValueError

async def correct_title_handler(
        message: Message, 
        widget: ManagedTextInput, 
        dialog_manager: DialogManager, 
        text: str) -> None:
    dialog_manager.dialog_data["title"] = text
    await dialog_manager.next()

async def correct_description_handler(
        message: Message, 
        widget: ManagedTextInput, 
        dialog_manager: DialogManager, 
        text: str) -> None:
    dialog_manager.dialog_data["description"] = text
    await dialog_manager.next()

async def error_title_handler(
        message: Message, 
        widget: ManagedTextInput, 
        dialog_manager: DialogManager, 
        error: ValueError):
    await message.answer(
        text='–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üò± (–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ)'
    )

async def error_description_handler(
        message: Message, 
        widget: ManagedTextInput, 
        dialog_manager: DialogManager, 
        error: ValueError):
    await message.answer(
        text='–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ üòî (—è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Å—Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å)'
    )

async def no_text(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    #print(type(widget))
    await message.answer(text='–Ø –ø–æ–∫–∞ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç üòî')

#=================================–ú–∞–∏–Ω –¥–∏–∞–ª–æ–≥#=========================================================================

start_dialog = Dialog(
    Window(                                                                        #--------–û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
        Format(text="–ü—Ä–∏–≤–µ—Ç {user_name}"),
        Group(
            SwitchTo(Const("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"), id='task_list', state=MainDialog.task_list),
            Button(Const("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), id="crawl", on_click=create_task),
        ),
        state=MainDialog.start,
        getter=get_name,
    ),
    Window(                                                                        #--------–û–∫–Ω–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á—å
        Const(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
        ScrollingGroup(
            Select(
                text=Format("{item[0]}"),
                id="time_select",
                items='titles',  # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                item_id_getter=lambda x: x[1],  # ID –∫–Ω–æ–ø–∫–∏ = —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                on_click=go_next  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞
            ),
            id="task_lists",
            width=1,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            height=5,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        ),
        Button(Const("–ú–µ–Ω—é"), id="task", on_click=go_main_menu),
        state=MainDialog.task_list,
        getter=get_task_list
    ),
    Window(                                                                        #--------–û–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
        Format(text="{title}"),
        Format(text="{description}", when="description"),
        Group(
            Button(Const("–£–¥–∞–ª–∏—Ç—å ‚ùå"), id="task", on_click=delete_task),
            SwitchTo(Const("–ù–∞–∑–∞–¥"), id='task_list', state=MainDialog.task_list),
            width=2,
        ),
        state=MainDialog.show_task,
        getter=get_task
    )
)


#=================================–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Å–∫–∏#======================================================================

create_task = Dialog(
    Window(                                                                        #--------–í–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        Format(text="–ù–∞–∑–≤–∞–Ω–∏–µ: {title}", when="title"),
        Format(text="–û–ø–∏—Å–∞–Ω–∏–µ: {description}", when="description"),
        Const(text="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"),
        Group(
            SwitchTo(Const("–ì–æ—Ç–æ–≤–æ ‚úÖ"), id='task_list', state=TaskCreating.accept, when="title"),
            SwitchTo(Const("–í–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ"), id='task_list', state=TaskCreating.description, when="title"),
            Button(Const("–û—Ç–º–µ–Ω–∞ ‚ùå"), id="cancel", on_click=go_main),
            width=2,
        ),
        TextInput(
            id='title_input',
            type_factory=title_check,
            on_success=correct_title_handler,
            on_error=error_handler,
        ),
        MessageInput(
            func=no_text,
            content_types=ContentType.ANY
        ),
        state=TaskCreating.title,
        getter=start_title
    ),
    Window(                                                                        #--------–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        Format(text="–ù–∞–∑–≤–∞–Ω–∏–µ: {title}"),
        Format(text="–û–ø–∏—Å–∞–Ω–∏–µ: {description}", when="description"),
        Const(text="–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"),
        Group(
            SwitchTo(Const("–ì–æ—Ç–æ–≤–æ ‚úÖ"), id='task_accept', state=TaskCreating.accept),
            SwitchTo(Const("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"), id='task_desc', state=TaskCreating.title),
            Button(Const("–û—Ç–º–µ–Ω–∞ ‚ùå"), id="cancel", on_click=go_main),
            width=2,
        ),
        TextInput(
            id='description_input',
            type_factory=description_check,
            on_success=correct_description_handler,
            on_error=error_handler,
        ),
        MessageInput(
            func=no_text,
            content_types=ContentType.ANY
        ),
        state=TaskCreating.description,
        getter=start_description
    ),
    Window(                                                                        #--------–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
        Const(text="–ó–∞–¥–∞—á–∞:"),
        Format(text="–ù–∞–∑–≤–∞–Ω–∏–µ: {title}"),
        Format(text="–û–ø–∏—Å–∞–Ω–∏–µ: {description}", when="description"),
        Group(
            Button(Const("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"), id='task_save', on_click=save_task),
            SwitchTo(Const("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"), id='title', state=TaskCreating.title),
            SwitchTo(Const("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"), id='task_desc', state=TaskCreating.description),
            Button(Const("–û—Ç–º–µ–Ω–∞ ‚ùå"), id="cancel", on_click=go_main),
            width=2,
        ),
        state=TaskCreating.accept,
        getter=start_accept
    ),
    
)

router = Router()
# –≠—Ç–æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(Command("start"))
async def command_start_process(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(state=MainDialog.start, mode=StartMode.RESET_STACK)

if __name__ == "__main__":
    dp.include_router(start_dialog)
    setup_dialogs(dp)
    dp.run_polling(bot)
